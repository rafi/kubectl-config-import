#!/usr/bin/env bash
#
# kubectl-config-import - merge kubeconfigs stored as Kubernetes secrets or files.
#
# Requires yq, https://github.com/mikefarah/yq
# fzf, https://github.com/junegunn/fzf
# and kubectl.
#
# 2024-10-03 - file and stdin support
# 2024-09-30 - merge into existing kubeconfig
# 2023-08-09 - add namespace selection
# 2022-09-09 - initial version
set -eou pipefail
[[ -n ${DEBUG:-} ]] && set -x
IFS=$'\n\t'

KUBECONFIG="${KUBECONFIG:=$HOME/.kube/config}"

function usage() {
	local SELF; SELF="$(basename "$0")"
	if [[ "$SELF" == kubectl-* ]]; then
		SELF='kubectl config-import'
	fi
	cat <<EOF
USAGE:
	$SELF [--url str|--jsonpath str] [namespace] [secret] : import from secret
	$SELF [-f|--file str]  : import kubeconfig from file
	cat <FILE> | $SELF     : import kubeconfig from stdin
	$SELF -d, --delete     : delete context
	$SELF -e, --edit       : edit kubeconfig(s)
	$SELF -h, --help       : show this help overview

KUBECONFIG="~${KUBECONFIG#"$HOME"}"

[options]
	--url str:       set server url when importing secret, e.g. https://localhost:6443
	--jsonpath str:  jsonpath for kubectl get secret, default: {.data.kubeconfig\.conf}
	-f, --file FILE: import specified kubeconfig file
	-d, --delete:    delete context interactively
	-e, --edit:      edit kubeconfig
	-h, --help:      this help overview
EOF
}

function select_namespace() {
	# Use fzf to prompt user to select namespace.
	$KUBECTL get namespaces \
		| fzf --exit-0 --ansi --info=right --height=50% --no-preview \
				--header-lines 1 --margin=1,3,0,3 --scrollbar=▏▕ \
				--prompt 'Select namespace to look for secrets> ' \
		| awk '{print $1}'
}

function select_secret() {
	# Use fzf to prompt user to select secret.
	$KUBECTL get secrets -n "$__namespace" --field-selector type=Opaque \
		| fzf --exit-0 --ansi --info=right --height=50% --no-preview \
				--header-lines 1 --margin=1,3,0,3 --scrollbar=▏▕ \
				--prompt 'Select secret to merge in kubeconfig> ' \
		| awk '{print $1}'
}

function current_context() {
	$KUBECTL config view -o=jsonpath='{.current-context}'
}

function get_contexts() {
	$KUBECTL config get-contexts -o=name | sort -n
}

function validate_secret() {
	if ! $KUBECTL get secret -n "$__namespace" "$__secret_name" 1>/dev/null; then
		echo >&2 "Secret '${__secret_name}' doesn't exist in __namespace '${__namespace}', aborting."
		exit 3
	fi
}

function import_secret() {
	# Concat final path name
	local context_name; context_name="$($KUBECTL config current-context)"
	local tmpfile; tmpfile="$(mktemp -p "$__cache_dir" -t secret.XXXXX)"
	# shellcheck disable=SC2064
	trap "rm -f '$tmpfile'" EXIT

	# Get secret contents, decode and save as file.
	$KUBECTL get secret "$__secret_name" -n "$__namespace" \
		-o jsonpath="$__jsonpath" | base64 --decode > "${tmpfile}"

	# Update cluster server URL, if user has requested to.
	if [ -n "$__apiserver_url" ]; then
		yq -i ".clusters[].cluster.server = \"${__apiserver_url}\"" "${tmpfile}"
	fi

	# Change context name to be more verbose.
	local name="${context_name}-${__namespace}-${__secret_name}"
	yq -i ".contexts[].name = \"$name\"" "${tmpfile}"
	yq -i ".contexts[].context.cluster = \"$name\"" "${tmpfile}"
	yq -i ".contexts[].context.user = \"$name\"" "${tmpfile}"
	yq -i ".clusters[].name = \"$name\", .users[].name = \"$name\"" "${tmpfile}"
	merge_config "$tmpfile"
	$KUBECTL config use-context "$name"
}

function import_stdin() {
	local stdin; stdin=$(cat)
	local tmpfile; tmpfile="$(mktemp -p "$__cache_dir" -t stdin.XXXXX)"
	# shellcheck disable=SC2064
	trap "rm -f '$tmpfile'" EXIT
	echo "$stdin" > "$tmpfile"
	import_file "$tmpfile"
}

function import_file() {
	local file="$1"
	local ctx
	ctx="$(KUBECONFIG="$file" $KUBECTL config current-context 2>/dev/null || true)"
	merge_config "$file"
	if [ -n "$ctx" ]; then
		$KUBECTL config use-context "$ctx"
	fi
}

function merge_config() {
	local src="$1"

	local merged; merged="$(mktemp -p "$__cache_dir" -t merged.XXXXX)"
	KUBECONFIG="$KUBECONFIG:$src" $KUBECTL config view --flatten > "$merged"

	# Use new context, ensuring everything is in place, and overwrite kubeconfig.
	if KUBECONFIG="$merged" $KUBECTL config view 1>/dev/null; then
		# Keep last 3 backups of kubeconfig.
		test -f "${kubeconfigs[0]}".bak.2 && rm -f "${kubeconfigs[0]}".bak.2
		for i in 2 1 0; do
			test -f "${kubeconfigs[0]}.bak.$i" \
				&& cp -f "${kubeconfigs[0]}.bak".{$i,$((i + 1))}
		done
		test -f "${kubeconfigs[0]}" && cp "${kubeconfigs[0]}"{,.bak.0}
		mv -f "$merged" "${kubeconfigs[0]}"
		echo "Merged into '${kubeconfigs[0]}' successfully."
	else
		echo >&2 'Failed to merge kubeconfig, aborting.'
		rm -f "$merged"
	fi
}

function main() {
	local __cache_dir="$HOME/.kube/cache/config-import"
	local __jsonpath="${KUBECONFIG_IMPORT_JSONPATH:={.data.kubeconfig\.conf\}}"
	local __namespace='' __secret_name='' __apiserver_url=''
	local want_delete=0 want_file=''
	local positional=()

	IFS=: read -ra kubeconfigs <<< "$KUBECONFIG"

	if [[ -z "${KUBECTL:-}" ]]; then
		if hash kubectl 2>/dev/null; then
			KUBECTL=kubectl
		elif hash kubectl.exe 2>/dev/null; then
			KUBECTL=kubectl.exe
		else
			echo >&2 "kubectl is not installed"
			exit 1
		fi
	fi

	while [ $# -gt 0 ]; do
		case "$1" in
		--url) shift; __apiserver_url="$1";;
		--jsonpath) shift; __jsonpath="$1";;
		-l|--list) get_contexts; exit;;
		-c|--current) $KUBECTL config current-context; exit;;
		-f|--file) want_file="$1";;
		-d|--delete) want_delete=1;;
		-e|--edit) "${EDITOR:-vi}" "${kubeconfigs[@]}"; exit;;
		-h|--help) usage; exit;;
		-*) echo "Warning, unrecognized option ${1}" >&2; exit 1;;
		*) positional+=("${1}");;
		esac
		shift
	done
	set -- "${positional[@]}"

	# Delete context if requested.
	if [ "$want_delete" = 1 ]; then
		if [ -n "$1" ]; then
			__context_name="$1"
		else
			__context_name="$($KUBECTL config get-contexts -o name | fzf)"
		fi
		test -n __context_name && $KUBECTL config delete-context "$__context_name"
		return
	fi

	mkdir -p "$__cache_dir"

	# Merge kubeconfig from stdin if any.
	if [ -n "$want_file" ]; then
		test -f "$1" || { echo >&2 "File not found: $1"; exit 1; }
		import_file "$1"
		return
	elif test ! -t 0; then
		import_stdin
		return
	fi

	# Select namespace and secret, validate and merge.
	__namespace="${1:-}"
	__secret_name="${2:-}"

	if [ -z "$__namespace" ]; then
		__namespace="$(select_namespace)"
		if [ -z "$__namespace" ]; then
			echo >&2 'No namespace selected, aborting.'
			exit 2
		fi
	fi

	if [ -z "$__secret_name" ]; then
		__secret_name="$(select_secret)"
		if [ -z "$__secret_name" ]; then
			echo >&2 'No secret selected, aborting.'
			exit 2
		fi
	fi

	validate_secret
	import_secret
}

main "$@"

# vim: set ts=2 sw=0 tw=80 noet :
